clock S1_z;
clock S2_z;
clock Ctrl_z;
clock Ctrl_y0;
int[0,2] S1_IntStat := 0;
int[0,2] S2_IntStat := 0;
int[0,4] Ctrl_IntStat := 0;
int[0,1] Ctrl_grant1 := 0;
int[0,1] polled_S1_grant := 0;
int[0,1] Ctrl_grant2 := 0;
int[0,1] polled_S2_grant := 0;
int[0,1] S1_Safe := 0;
int[0,1] polled_Ctrl_Safe1 := 0;
int[0,1] S2_Safe := 0;
int[0,1] polled_Ctrl_Safe2 := 0;

process S1 {

    state start_S1{S1_z <= 0}, I_am_safe{S1_z <= 1000}, I_am_unsafe{S1_z <= 1000};
    init start_S1;
    trans 
    start_S1 -> I_am_safe { assign S1_Safe := 1, S1_IntStat := 0; },
    I_am_safe -> I_am_safe { guard S1_IntStat == 0 && S1_z > 0; assign polled_S1_grant := Ctrl_grant1, S1_IntStat := 1; },
    I_am_safe -> I_am_safe { guard S1_IntStat == 2; assign S1_IntStat := 0, S1_z := 0; },
    I_am_safe -> I_am_safe { guard S1_IntStat == 1 && polled_S1_grant == 0 && S1_Safe == 1; assign S1_IntStat := 0, S1_z := 0; },
    I_am_safe -> I_am_safe { guard S1_IntStat == 1 && polled_S1_grant == 1 && S1_Safe == 1; assign S1_IntStat := 0, S1_z := 0; },
    I_am_safe -> I_am_unsafe { guard S1_IntStat == 1 && polled_S1_grant == 1 && S1_Safe == 1; assign S1_Safe := 0, S1_IntStat := 0, S1_z := 0; },
    I_am_unsafe -> I_am_unsafe { guard S1_IntStat == 0 && S1_z > 0; assign polled_S1_grant := Ctrl_grant1, S1_IntStat := 1; },
    I_am_unsafe -> I_am_unsafe { guard S1_IntStat == 2; assign S1_IntStat := 0, S1_z := 0; },
    I_am_unsafe -> I_am_safe { guard S1_IntStat == 1 && S1_Safe == 0; assign S1_Safe := 1, S1_IntStat := 0, S1_z := 0; },
    I_am_unsafe -> I_am_unsafe { guard S1_IntStat == 1 && S1_Safe == 0; assign S1_IntStat := 0, S1_z := 0; };
}

process S2 {

    state start_S2{S2_z <= 0}, I_am_safe{S2_z <= 1001}, I_am_unsafe{S2_z <= 1001};
    init start_S2;
    trans 
    start_S2 -> I_am_safe { assign S2_Safe := 1, S2_IntStat := 0; },
    I_am_safe -> I_am_safe { guard S2_IntStat == 0 && S2_z > 0; assign polled_S2_grant := Ctrl_grant2, S2_IntStat := 1; },
    I_am_safe -> I_am_safe { guard S2_IntStat == 2; assign S2_IntStat := 0, S2_z := 0; },
    I_am_safe -> I_am_safe { guard S2_IntStat == 1 && polled_S2_grant == 0 && S2_Safe == 1; assign S2_IntStat := 0, S2_z := 0; },
    I_am_safe -> I_am_safe { guard S2_IntStat == 1 && polled_S2_grant == 1 && S2_Safe == 1; assign S2_IntStat := 0, S2_z := 0; },
    I_am_safe -> I_am_unsafe { guard S2_IntStat == 1 && polled_S2_grant == 1 && S2_Safe == 1; assign S2_Safe := 0, S2_IntStat := 0, S2_z := 0; },
    I_am_unsafe -> I_am_unsafe { guard S2_IntStat == 0 && S2_z > 0; assign polled_S2_grant := Ctrl_grant2, S2_IntStat := 1; },
    I_am_unsafe -> I_am_unsafe { guard S2_IntStat == 2; assign S2_IntStat := 0, S2_z := 0; },
    I_am_unsafe -> I_am_safe { guard S2_IntStat == 1 && S2_Safe == 0; assign S2_Safe := 1, S2_IntStat := 0, S2_z := 0; },
    I_am_unsafe -> I_am_unsafe { guard S2_IntStat == 1 && S2_Safe == 0; assign S2_IntStat := 0, S2_z := 0; };
}

process Ctrl {

    state start_Ctrl{Ctrl_z <= 0}, wait_for_s2{Ctrl_z <= 1000}, g1{Ctrl_z <= 1000}, wait_for_s1{Ctrl_z <= 1000}, g2{Ctrl_z <= 1000};
    init start_Ctrl;
    trans 
    start_Ctrl -> wait_for_s2 { assign Ctrl_grant1 := 0, Ctrl_grant2 := 0, Ctrl_IntStat := 0; },
    wait_for_s2 -> wait_for_s2 { guard Ctrl_IntStat == 0 && Ctrl_z > 0; assign polled_Ctrl_Safe1 := S1_Safe, polled_Ctrl_Safe2 := S2_Safe, Ctrl_IntStat := 1; },
    wait_for_s2 -> wait_for_s2 { guard Ctrl_IntStat == 2; assign Ctrl_IntStat := 0, Ctrl_z := 0; },
    wait_for_s2 -> wait_for_s2 { guard Ctrl_IntStat == 1 && polled_Ctrl_Safe2 == 0 && Ctrl_grant1 == 0; assign Ctrl_IntStat := 0, Ctrl_z := 0; },
    wait_for_s2 -> wait_for_s2 { guard Ctrl_IntStat == 1 && polled_Ctrl_Safe2 == 1 && Ctrl_grant1 == 0 && Ctrl_y0 < 2000; assign Ctrl_IntStat := 2; },
    wait_for_s2 -> g1 { guard Ctrl_IntStat == 1 && polled_Ctrl_Safe2 == 1 && Ctrl_grant1 == 0 && Ctrl_y0 >= 2000; assign Ctrl_grant1 := 1, Ctrl_IntStat := 0, Ctrl_z := 0, Ctrl_y0 := 0; },
    g1 -> g1 { guard Ctrl_IntStat == 0 && Ctrl_z > 0; assign polled_Ctrl_Safe1 := S1_Safe, polled_Ctrl_Safe2 := S2_Safe, Ctrl_IntStat := 1; },
    g1 -> g1 { guard Ctrl_IntStat == 2; assign Ctrl_IntStat := 0, Ctrl_z := 0; },
    g1 -> wait_for_s1 { guard Ctrl_IntStat == 1 && polled_Ctrl_Safe1 == 0 && Ctrl_grant1 == 1; assign Ctrl_grant1 := 0, Ctrl_IntStat := 0, Ctrl_z := 0, Ctrl_y0 := 0; },
    g1 -> g1 { guard Ctrl_IntStat == 1 && polled_Ctrl_Safe1 == 1 && Ctrl_grant1 == 1 && Ctrl_y0 < 2000; assign Ctrl_IntStat := 2; },
    g1 -> wait_for_s1 { guard Ctrl_IntStat == 1 && polled_Ctrl_Safe1 == 1 && Ctrl_grant1 == 1 && Ctrl_y0 >= 2000; assign Ctrl_grant1 := 0, Ctrl_IntStat := 0, Ctrl_z := 0, Ctrl_y0 := 0; },
    wait_for_s1 -> wait_for_s1 { guard Ctrl_IntStat == 0 && Ctrl_z > 0; assign polled_Ctrl_Safe1 := S1_Safe, polled_Ctrl_Safe2 := S2_Safe, Ctrl_IntStat := 1; },
    wait_for_s1 -> wait_for_s1 { guard Ctrl_IntStat == 2; assign Ctrl_IntStat := 0, Ctrl_z := 0; },
    wait_for_s1 -> wait_for_s1 { guard Ctrl_IntStat == 1 && polled_Ctrl_Safe1 == 0 && Ctrl_grant2 == 0; assign Ctrl_IntStat := 0, Ctrl_z := 0; },
    wait_for_s1 -> wait_for_s1 { guard Ctrl_IntStat == 1 && polled_Ctrl_Safe1 == 1 && Ctrl_grant2 == 0 && Ctrl_y0 < 2000; assign Ctrl_IntStat := 2; },
    wait_for_s1 -> g2 { guard Ctrl_IntStat == 1 && polled_Ctrl_Safe1 == 1 && Ctrl_grant2 == 0 && Ctrl_y0 >= 2000; assign Ctrl_grant2 := 1, Ctrl_IntStat := 0, Ctrl_z := 0, Ctrl_y0 := 0; },
    g2 -> g2 { guard Ctrl_IntStat == 0 && Ctrl_z > 0; assign polled_Ctrl_Safe1 := S1_Safe, polled_Ctrl_Safe2 := S2_Safe, Ctrl_IntStat := 1; },
    g2 -> g2 { guard Ctrl_IntStat == 2; assign Ctrl_IntStat := 0, Ctrl_z := 0; },
    g2 -> wait_for_s2 { guard Ctrl_IntStat == 1 && polled_Ctrl_Safe2 == 0 && Ctrl_grant2 == 1; assign Ctrl_grant2 := 0, Ctrl_IntStat := 0, Ctrl_z := 0, Ctrl_y0 := 0; },
    g2 -> g2 { guard Ctrl_IntStat == 1 && polled_Ctrl_Safe2 == 1 && Ctrl_grant2 == 1 && Ctrl_y0 < 2000; assign Ctrl_IntStat := 2; },
    g2 -> wait_for_s2 { guard Ctrl_IntStat == 1 && polled_Ctrl_Safe2 == 1 && Ctrl_grant2 == 1 && Ctrl_y0 >= 2000; assign Ctrl_grant2 := 0, Ctrl_IntStat := 0, Ctrl_z := 0, Ctrl_y0 := 0; };
}

system S1, S2, Ctrl;

