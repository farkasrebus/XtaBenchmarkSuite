const int dB_Low_l = 19;
const int dA_Low_u = 18;
const int dOr_l = 3;
const int dB_High_u = 8;
const int dA_Low_l = 16;
const int dAnd_u = 4;
const int dA_High_u = 14;
const int dB_Low_u = 20;
const int dOr_u = 4;
const int dAnd_l = 3;
const int dA_High_l = 13;
const int dB_High_l = 7;


chan xDown;
chan bDown;
chan xUp;
chan aDown;
chan tDown;
chan bUp;
chan aUp;
chan tUp;

process andGate() {
	clock ckAnd;

	state
		And000 { ckAnd >= 0 },
		And001 { ckAnd >= 0 && ckAnd <= dAnd_u },
		And010 { ckAnd >= 0 },
		And011 { ckAnd >= 0 && ckAnd <= dAnd_u },
		And100 { ckAnd >= 0 },
		And101 { ckAnd >= 0 && ckAnd <= dAnd_u },
		And110 { ckAnd >= 0 && ckAnd <= dAnd_u },
		And111 { ckAnd >= 0 };

	init And111;

	trans
		And001 -> And101 { sync tUp?; assign ckAnd = 0; },
		And011 -> And111 { sync tUp?; },
		And100 -> And000 { sync tDown?; },
		And110 -> And010 { sync tDown?; },
		And000 -> And010 { sync bUp?; },
		And100 -> And110 { sync bUp?; assign ckAnd = 0; },
		And001 -> And011 { sync bUp?; assign ckAnd = 0; },
		And101 -> And111 { sync bUp?; },
		And010 -> And000 { sync bDown?; },
		And111 -> And101 { sync bDown?; assign ckAnd = 0; },
		And011 -> And010 { guard ckAnd >= dAnd_l; sync xDown!; },
		And110 -> And111 { guard ckAnd >= dAnd_l; sync xUp!; },
		And110 -> And100 { sync bDown?; },
		And001 -> And000 { guard ckAnd >= dAnd_l; sync xDown!; },
		And111 -> And011 { sync tDown?; assign ckAnd = 0; },
		And101 -> And001 { sync tDown?; assign ckAnd = 0; },
		And010 -> And110 { sync tUp?; assign ckAnd = 0; },
		And011 -> And001 { sync bDown?; assign ckAnd = 0; },
		And101 -> And100 { guard ckAnd >= dAnd_l; sync xDown!; },
		And000 -> And100 { sync tUp?; };
}
process orGate() {
	clock ckOr;

	state
		Or000 { ckOr >= 0 },
		Or001 { ckOr >= 0 && ckOr <= dOr_u },
		Or010 { ckOr >= 0 && ckOr <= dOr_u },
		Or011 { ckOr >= 0 },
		Or100 { ckOr >= 0 && ckOr <= dOr_u },
		Or101 { ckOr >= 0 },
		Or110 { ckOr >= 0 && ckOr <= dOr_u },
		Or111 { ckOr >= 0 };

	init Or111;

	trans
		Or101 -> Or111 { sync aUp?; },
		Or101 -> Or001 { sync xDown?; assign ckOr = 0; },
		Or100 -> Or000 { sync xDown?; },
		Or000 -> Or010 { sync aUp?; assign ckOr = 0; },
		Or001 -> Or101 { sync xUp?; },
		Or010 -> Or110 { sync xUp?; assign ckOr = 0; },
		Or111 -> Or011 { sync xDown?; },
		Or100 -> Or110 { sync aUp?; assign ckOr = 0; },
		Or001 -> Or000 { guard ckOr >= dOr_l; sync tDown!; },
		Or000 -> Or100 { sync xUp?; assign ckOr = 0; },
		Or001 -> Or011 { sync aUp?; },
		Or110 -> Or100 { sync aDown?; assign ckOr = 0; },
		Or010 -> Or011 { guard ckOr >= dOr_l; sync tUp!; },
		Or100 -> Or101 { guard ckOr >= dOr_l; sync tUp!; },
		Or111 -> Or101 { sync aDown?; },
		Or011 -> Or001 { sync aDown?; assign ckOr = 0; },
		Or110 -> Or111 { guard ckOr >= dOr_l; sync tUp!; },
		Or011 -> Or111 { sync xUp?; },
		Or110 -> Or010 { sync xDown?; assign ckOr = 0; },
		Or010 -> Or000 { sync aDown?; };
}
process input() {
	clock cka;
	clock ckb;

	state
		InputInit { ckb <= dB_High_u },
		Input2 { cka <= dA_High_u },
		Input3 { ckb <= dB_Low_u },
		Input4 { cka <= dA_Low_u };

	init InputInit;

	trans
		InputInit -> Input2 { guard ckb >= dB_High_l; sync bDown!; assign ckb = 0; },
		Input3 -> Input4 { guard ckb >= dB_Low_l; sync bUp!; assign ckb = 0; },
		Input2 -> Input3 { guard cka >= dA_High_l; sync aDown!; assign cka = 0; },
		Input4 -> InputInit { guard cka >= dA_Low_l; sync aUp!; assign cka = 0, ckb = 0; };
}

system andGate, orGate, input;
