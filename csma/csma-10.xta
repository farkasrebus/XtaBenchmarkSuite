const int N = 10;

const int LAMDA = 404;
const int SIGMA = 13;

typedef int[0, N - 1] id_t;
int j;

chan begin, end, busy;
chan cd[N];

process Bus() {
	clock x;
	
	state
		idle,
		active,
		collision { x < SIGMA },
		transmit;
	
	urgent
		transmit;
    
	init idle;
	
	trans
		transmit -> transmit { guard j < N-1; sync cd[j]!; assign x = 0, j = j + 1; },
		transmit -> idle { guard j == N - 1; sync cd[j]!; assign j = 0, x = 0; },
		idle -> active { sync begin?; assign x = 0; },
		active -> idle { sync end?; assign x = 0; },
		active -> active { guard x >= SIGMA; sync busy!; },
		active -> collision { guard x < SIGMA; sync begin?; assign x = 0; },
		collision -> transmit { guard x < SIGMA; sync cd[j]!; assign x = 0, j = j + 1; };
}

process Station(const id_t id) {
	clock x;
	
	state
		wait,
		transm { x <= LAMDA },
		retry { x <= 2 * SIGMA };
	
	init wait;
	
	trans
		wait -> transm { sync begin!; assign x = 0; },
		wait -> wait { sync cd[id]?; assign x = 0; },
		wait -> retry { sync cd[id]?; assign x = 0; },
		wait -> retry { sync busy?; assign x = 0; },
		transm -> wait { guard x >= LAMDA; sync end!; assign x = 0; },
		transm -> retry { guard x <= 2 * SIGMA; sync cd[id]?; assign x = 0; },
		retry -> transm { guard x <= 2 * SIGMA; sync begin!; assign x = 0; },
		retry -> retry { guard x <= 2 * SIGMA; sync cd[id]?; assign x = 0; };
}

system Bus, Station;