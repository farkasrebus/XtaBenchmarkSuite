const int N = 30;
  
const int TTRT = 50 * N;
const int SA = 20;
const int TD = 0;
  
typedef int[1, N] id_t;
  
chan TT[id_t];
chan RT[id_t];
  
process Station(const id_t pid) {
	clock trt, xA, xB;
    
	state
		q7 { xB <= TTRT + SA },
		q6 { trt <= SA },
		q5 { trt <= SA },
		q4,
		q3 { xA <= TTRT + SA },
		q2 { trt <= SA },
		q1 { trt <= SA },
		q0;
		
	init q0;
	
	trans
		q0 -> q1 { guard trt >= TTRT; sync TT[pid]?; assign trt = 0, xB = 0; },
		q0 -> q2 { guard trt < TTRT; sync TT[pid]?; assign trt = 0, xB = 0; },
		q1 -> q4 { guard trt >= SA; sync RT[pid]!; },
		q2 -> q3 { guard trt >= SA; },
		q3 -> q4 { sync RT[pid]!; },
		q4 -> q5 { guard trt >= TTRT; sync TT[pid]?; assign trt = 0, xA = 0; },
		q4 -> q6 { guard trt < TTRT; sync TT[pid]?; assign trt = 0,xA = 0; },
		q5 -> q0 { guard trt >= SA; sync RT[pid]!; },
		q6 -> q7 { guard trt >= SA; },
		q7 -> q0 { sync RT[pid]!; };
}

process Ring() {
	clock t;
	int id;
    
	state
		S0,
		S1 { t <= TD },
		S2;

	init S0;
	
	trans
		S0 -> S1 { assign id = 1; },
		S1 -> S2 { guard t >= TD; sync TT[id]!; },
		S2 -> S1 { sync RT[id]?; assign t = 0, id = (id % N) + 1; };
}

system Station, Ring;
  